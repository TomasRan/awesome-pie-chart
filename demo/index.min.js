(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*
 * for example:
 * var doughnut = new DoughnutGraph({
 *	'boxWidth': 200,		//宽度
 *	'boxHeight': 200,		//高度
 *	'outsideR': 100,		//外径
 *	'insideR': 80,			//内径
 *	'strokeColor': '#eee',	//边框颜色
 *	'strokeWidth': 10,		//边框宽度
 *	'slices': [{			//分片数组
 *		color: '#eee',
 *		percent: 0.1
 *	}, {
 *		color: '#fff',
 *		percent: 0.2
 *	}],
 *	'sort': false,			//是否对分片数组的percent进行排序
 *	'rotation': 30			//旋转角度
 * });
 *
 */


// 参数检测，处理
function argsCheck(args) {
	$.each(args.slices, function(i, item) {
		item.angle = (item.percent || 0) * 360;
	});
};

// 分片默认颜色分配
function allotColor(i) {
	var colorPool = ['E32322', 'EA621F', 'F18E1C', 'FDC60B', 'F4E500', '8CBB26', '008E5B', '0696BB', '2A71B0', '444E99', '6D398B', 'C4037D'];
	return '#' + colorPool[index % colorPool.length];
};

var doughnutConstructor = {
	svg: {
		createElement: function(tagName) {
			return $(document.createElementNS('http://www.w3.org/2000/svg', tagName));
		},

		getSectionalPath: function(startAngle, stopAngle, insideR, outsideR) {
			var startRadian = startAngle * Math.PI / 180;
			var stopRadian = stopAngle * Math.PI / 180;	
	
			var startAngleTri = {
				cos: Math.cos(startRadian),
				sin: Math.sin(startRadian)
			};

			var stopAngleTri = {
				cos: Math.cos(stopRadian),
				sin: Math.sin(stopRadian)	
			};

			return ['M', insideR * startAngleTri.cos, insideR * startAngleTri.sin,
			'A', insideR, insideR, 0, 1, insideR * stopAngleTri.cos, insideR * stopAngleTri.sin,
			'L', outsideR * stopAngleTri.cos, outsideR * stopAngleTri.sin,
			'A', outsideR, outsideR, 0, 1, outsideR * startAngleTri.cos, outsideR * startAngleTri.sin,
			'Z'].join(' ');
		}
	}
};

function DoughnutGraph(args) {
	argsCheck.call(this, args);

	this.graphEngine = 'svg';
	//this.graphEngine = $.browser.id < 9 ? 'vml' : 'svg';
	
	if (args.sort) {
		this.slices = args.slices.sort(function(a, b) {
			return Number(a.percent) < Number(b.percent);
		});
	} else {
		this.slices = args.slices;
	}

	var self = this;
	this.createDoughnut = {
		svg: function() {
			var svg = doughnutConsturctor.svg.createElement('svg').attr({
				'width': self.args.boxWidth,
				'height': self.args.boxHeight
			});

			// construct slices
			var startAngle = 0;

			$.each(self.slices, function(i, item) {
				doughnutConstructor.svg.createElement('path').attr({
					'd': doughnutConstructor.svg.getSectionalPath(startAngle, startAngle + item.angle, self.args.inradium, self.args.inradium + self.args.strokeWidth)
				}).css({
					'fill': item.color || allotColor(i),
					'stroke': self.args.strokeColor || allotColor(i),
					'strokeWidth': self.args.strokeColor ? (self.args.strokeWidth || 1) : 0
				}).appendTo(svg);
				startAngle += item.angle;
			});	

			return svg;
		},

		vml: function() {
			 
		}
	};
};

DoughnutGraph.prototype = {
	constructor: DoughnutGraph,
	getNode: function() {
		return this.createDoughnut[this.graphEngine];
	}
};

module.exports = DoughnutGraph;

},{}]},{},[1]);

},{}],2:[function(require,module,exports){
var DoughGraph = require('./doughnut.js');

var doughGraph = new DoughGraph({
	boxWidth: 200,
	boxHeight: 200,
	outsideR: 100,
	insideR: 80,
	slices: [{
		color: '#eee',
		percent: 0.1
	}, {
		color: '#333',
		percent: 0.5
	}, {
		color: '#444',
		percent: 0.4
	}]
});

$('body').append(doughGraph);

},{"./doughnut.js":1}]},{},[2]);
